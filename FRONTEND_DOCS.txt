### Elite Wealth Frontend Documentation

This document describes how the Elite Wealth frontend works, how to run it locally, the data models it expects, and how to connect it to a real backend.

---

### Overview
- Frontend-only React application built with Vite and TypeScript.
- Domain data (investors, agents, investments, plans, payments) is provided by an in-memory mock (no database required for local/demos).
- Authentication uses an OTP flow against a backend API. For local demos without a backend, you can bypass auth using the dev instructions below.

---

### Tech Stack
- Vite + React + TypeScript
- Tailwind CSS + shadcn/ui components
- React Router (single-page app)
- TanStack Query for data caching
- Lightweight in-memory mock mimicking Supabase-like querying for domain data

---

### Quick Start
1) Install Node.js 18+ (recommend installing via nvm)
2) Install dependencies:
   - npm i
3) Start the dev server:
   - npm run dev
4) Open the app in your browser:
   - http://localhost:5173 (default Vite port)

---

### Authentication
The app uses an OTP-based sign-in flow backed by a backend API. The base URL is defined in `src/contexts/AuthContext.tsx` as `API_BASE`.

- API base URL: `src/contexts/AuthContext.tsx` → `API_BASE = 'https://elite-wealth-company-project.vercel.app'`
- OTP send: POST `/auth/otp-send` with `{ email }`
- OTP verify/login: POST `/auth/login` with `{ email, otp }`
- Fetch profile: GET `/auth/profile` with `Authorization: Bearer <token>`
- Logout: POST `/auth/logout`

If you need to point to your own backend, update `API_BASE` in `src/contexts/AuthContext.tsx`.

#### Local development without a backend (auth bypass)
Protected areas require a valid session with `user` and `profile` values present. For local demos without a backend, you can populate the required localStorage keys from your browser console and refresh:

```js
localStorage.setItem('authToken', 'dev-token');
localStorage.setItem('authUser', JSON.stringify({
  user_id: '00000000-0000-0000-0000-000000000001',
  email: 'admin@example.com',
  role: 'super_admin'
}));
localStorage.setItem('authProfile', JSON.stringify({
  user_id: '00000000-0000-0000-0000-000000000001',
  email: 'admin@example.com',
  role: 'super_admin',
  first_name: 'Admin',
  last_name: 'User'
}));
location.reload();
```

- Sign out clears these values automatically. To manually reset, remove the three keys above from Local Storage.

---

### Data & Mock Layer (No real DB required)
Domain data is served via a lightweight in-memory mock that provides a subset of a Supabase-like API.

- Entry point: `src/main.tsx` calls `seedDemoData()` to populate demo data on load.
- Mock client: `src/integrations/supabase/client.ts`
  - Provides `auth` helpers (mocked) and table-like methods: `from(table).select().eq().insert().update()` and `rpc(name, args)`.
  - In-memory tables: `profiles`, `customers`, `agents`, `company_investments`, `payment_schedules`, `plans`, and `customer_pii_access_log`.
- Demo data: `src/lib/demoSeed.ts`
  - Seeds `plans`, `customers`, `payment_schedules`, `agents`, and `company_investments`.

This mock powers all domain UI so you can develop and demo the app without a real backend. When you connect a real backend, the repositories in `src/lib/*Repo.ts` are the integration points to update.

---

### Project Structure (selected)
- `src/pages` — Route pages
  - `Auth.tsx` — OTP sign-in UI
  - `Dashboard.tsx` — KPIs and stats
  - `Investors.tsx` — CRUD + approvals + images
  - `Agents.tsx` — CRUD + approvals + images
  - `Investments.tsx` — CRUD + approvals + images
  - `Plans.tsx` — Manage/view plans (manager+)
  - `Payments.tsx` — Scheduled payments view (manager+)
  - `Users.tsx` — Manage users/roles (super_admin)
  - `NotFound.tsx` — Fallback route
- `src/components` — Layout and UI components (shadcn/ui in `components/ui`)
- `src/contexts/AuthContext.tsx` — OTP auth flow, session/profile management
- `src/lib` — Repository layer used by pages (`profileRepo.ts`, `customerRepo.ts`, `demoSeed.ts`)
- `src/integrations/supabase/client.ts` — In-memory data mock

---

### Routing & Role Guard
- Router: `src/App.tsx` uses React Router.
- Guard: `src/components/ProtectedRoute.tsx`
  - Redirects unauthenticated users to `/auth`.
  - Role hierarchy: `office_staff` < `manager` < `super_admin`.
  - Pages like `Plans`, `Payments`, and parts of `Investments` are restricted by role.

---

### Feature Overview by Page
- `Auth`
  - Enter email → send OTP → verify OTP to sign in.
- `Dashboard`
  - Displays customer stats via mocked RPC `get_customer_stats`.
- `Investors`
  - Create investors; managers approve/reject; supports image URLs.
- `Agents`
  - Create agents; managers approve/reject.
- `Investments`
  - Create company investments; managers approve/reject.
- `Plans`
  - View/manage plans (manager+).
- `Payments`
  - View scheduled payments (manager+).
- `Users`
  - Manage user roles (super_admin).

---

### Data Models (frontend expectations)
- profiles
  { id, user_id, email, first_name, last_name, role('super_admin'|'manager'|'office_staff'), created_at, updated_at }

- customers (investors)
  { id, first_name, last_name, email, phone, address, pan_number, aadhar_number, plan_id, investment_amount,
    approval_status('pending'|'approved'|'rejected'), submitted_by, reviewed_by, review_comments, approved_at,
    created_at, updated_at, images?: string[] (URLs or base64 in mock), data_access_level?: 'BASIC_ACCESS'|'FULL_ACCESS' }

- plans
  { id, name, segment('PRE-IPO'|'REAL ESTATE'|'DIRECT'), investment_amount, duration_months, return_percentage,
    is_active, created_at, updated_at }

- payment_schedules
  { id, customer_id, amount, payment_date(YYYY-MM-DD), is_paid, paid_at, created_at,
    payment_type?: 'monthly'|string,
    customers?: { first_name, last_name, investment_amount } }

- agents
  { id, first_name, last_name, email, phone, address, pan_number, commission_percentage,
    approval_status, submitted_by, reviewed_by, review_comments, approved_at,
    created_at, updated_at, images?: string[] }

- company_investments
  { id, investment_name, description, investment_amount, expected_return, investment_date, plan_id,
    approval_status, submitted_by, reviewed_by, review_comments, approved_at,
    created_at, updated_at, images?: string[] }

---

### Approval Workflow & RBAC
- Uniform fields across customers, agents, and company investments:
  - `approval_status`: 'pending'|'approved'|'rejected'
  - `reviewed_by`: user_id of approver
  - `review_comments`: string|null
  - `approved_at`: ISO timestamp|null
  - `submitted_by`: user_id of creator

- Roles
  - `office_staff`: create entities, read lists with masking; cannot approve
  - `manager`: all of the above + approve/reject
  - `super_admin`: full access, including sensitive details

- Masking (for customers):
  - BASIC_ACCESS (office_staff): mask `address`, `pan_number`, `aadhar_number` → 'HIDDEN'
  - FULL_ACCESS (manager, super_admin): unmasked

---

### Repository Layer → Backend Mapping
Keep repository interfaces stable and swap implementations to call your backend.

- `src/lib/profileRepo.ts`
  - `getProfileByUserId(userId)` → GET `/profiles/:user_id`
  - `listProfiles()` → GET `/profiles`
  - `createProfile(input)` → POST `/profiles`
  - `updateUserRole(userId, role)` → PATCH `/profiles/:user_id`

- `src/lib/customerRepo.ts`
  - `listInvestorsWithAccess()` → GET `/customers` (apply masking by role)
  - `listActivePlans()` → GET `/plans?is_active=true`
  - `createInvestor(...)` → POST `/customers`
  - `approveInvestorSecure(id, action, comments?)` → POST `/customers/:id/approve` or `/customers/:id/reject`

- Mocked RPCs in `src/integrations/supabase/client.ts`
  - `get_customer_stats`: returns `{ total_customers, pending_approvals, approved_customers, rejected_customers }[]`
  - `get_customers_by_role`: returns customers with data_access_level (FULL_ACCESS in mock)
  - `approve_customer_secure({ customer_id, action, comments })`: updates approval fields

---

### Proposed Backend API Contract
- Auth
  - POST `/auth/sessions` (email OTP or SSO) → `{ token, user }`
  - GET `/auth/profile` → current user profile

- Profiles
  - GET `/profiles?search=&page=&page_size=` → `{ items: Profile[], total }`
  - POST `/profiles` → create profile
  - PATCH `/profiles/:user_id` → update role/names

- Investors (customers)
  - GET `/customers?status=pending|approved|rejected&search=&page=&page_size=&plan_id=` → `{ items: Customer[], total }`
  - POST `/customers` → create
  - POST `/customers/:id/approve` → `{ comments? }`
  - POST `/customers/:id/reject` → `{ comments? }`

- Agents
  - GET `/agents?status=&search=&page=&page_size=` → `{ items: Agent[], total }`
  - POST `/agents` → create
  - POST `/agents/:id/approve` / `/reject`

- Company Investments
  - GET `/investments?status=&search=&page=&page_size=&plan_id=` → `{ items: Investment[], total }`
  - POST `/investments` → create
  - POST `/investments/:id/approve` / `/reject`

- Plans
  - GET `/plans?is_active=true` → `Plan[]`

- Dashboard
  - GET `/stats/customers` → `{ total_customers, pending_approvals, approved_customers, rejected_customers }`

- Error shape
  - 4xx/5xx → `{ error: { code: string, message: string, details?: any } }`

---

### Images/Document Uploads
- Mock: images are stored as base64 data URLs in the `images: string[]` field.
- Production: upload files to object storage (S3, Supabase Storage). Store returned URLs in `images: string[]`.
- Recommended: validate mime type, size limits, virus scanning.

---

### Pagination & Sorting
- Standard query params: `page` (1-based), `page_size` (default 20, max 100), `sort` (e.g., `created_at:desc`).
- Responses include `{ items, total }`.

---

### Security & Auditing (backend responsibilities)
- Enforce RBAC at the API layer; never rely on the client for masking/permissions.
- Log CRUD/approvals to an `audit_trail` table: `{ id, table_name, record_id, action, old_values, new_values, performed_by, performed_at }`.
- CORS: allow the frontend origin.
- Rate limiting: protect approval endpoints.
- File storage: use pre-signed upload URLs.

---

### NPM Scripts
These are defined in `package.json`:
- `dev` — Start Vite dev server
- `build` — Production build
- `build:dev` — Development-mode build (useful for debugging prod paths)
- `preview` — Preview a production build locally
- `lint` — Run ESLint

---

### Extending: Swap Mock with Real Backend
1) Keep repository interfaces unchanged (`profileRepo.ts`, `customerRepo.ts`).
2) Implement each repo function to call your backend endpoints.
3) Remove `seedDemoData()` in `src/main.tsx` once real data is present.
4) Replace mock-specific UI assumptions if needed.

---

### Troubleshooting
- 401 Unauthorized on requests:
  - Ensure `authToken` is present in Local Storage and is valid for your backend.
- OTP not received:
  - Check your backend logs. For local demos, use the auth bypass snippet above.
- CORS errors:
  - Configure your backend to allow the Vite dev origin (e.g., `http://localhost:5173`).
- Empty lists:
  - When using the mock, confirm `seedDemoData()` ran (see browser console) and refresh.

---

### Notes
- Types are enforced in the repository layer and UI components.
- Lists are pagination-ready; add query params in your backend when needed.
- This doc supersedes any older references to a non-existent `demoLogin(role)` helper; OTP + profile endpoints and the dev-bypass flow above are the supported paths.
